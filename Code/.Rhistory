AllFacs$lon[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
}
}
a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
i=3
a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$FacilityID[i]
a$VAP_PMT_NO==AllFacs$FacilityID[i]]
a$VAP_PMT_NO[a$VAP_PMT_NO=='VA0000248']
View(a)
path<-"C:/Users/connorb5/Desktop/USGS Testing"
a<-read.csv(uri_summary,stringsAsFactors = F)
#Get ECHO Facility List and store in dataframe 'a'
uri_query<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_facilities?output=XML&p_st=",state,"&p_tribedist=0")
ECHO_xml<-getURL(uri_query)
ECHO_query<-xmlParse(ECHO_xml)
QID<-xmlToList(ECHO_query)
QID<-QID$QueryID
#Get ECHO Facility List and store in dataframe 'a'
uri_query<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_facilities?output=XML&p_st=",state,"&p_tribedist=0")
#Required inputs: State, Flow frame from ECHO run, flow frame from 2017 (shows change in outfalls),
#and VA Hydro facility list (http://deq1.bse.vt.edu/d.bet/vahydro_facilities)
#VA Hydro facility list and VPDES info spreadsheet are manual downloads due to slow internet connections, making it difficult to access without R timing out
#input/output path will also be required as the script needs a place to store downloads from VPDES
state<-"VA"
#Get ECHO Facility List and store in dataframe 'a'
uri_query<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_facilities?output=XML&p_st=",state,"&p_tribedist=0")
ECHO_xml<-getURL(uri_query)
ECHO_query<-xmlParse(ECHO_xml)
QID<-xmlToList(ECHO_query)
QID<-QID$QueryID
uri_summary<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_download?output=CSV&qid=",QID)
a<-read.csv(uri_summary,stringsAsFactors = F)
names(a$SourceID)
names(a[,2])
names(a)[names(a)=="SourceID"]
names(a)[names(a)=="SourceID"]<-"VAP_PMT_NO"#Need to rename to give a central columnn name for future joins
################################################################################################################################
#Assign design flows to VPDES outfalls using the VPDES information spreadsheet
for (i in 1:length(VPDES_IP$VAP_PMT_NO)){
VPDES_IP$DesFlow[i]<-NA
if (length(VPDESFlows$`Design Flow Null`[VPDESFlows$`Permit Number`==VPDES_IP$VAP_PMT_NO[i]])>0){
VPDES_IP$DesFlow[i]<-VPDESFlows$`Design Flow Null`[VPDESFlows$`Permit Number`==VPDES_IP$VAP_PMT_NO[i]]
}
VPDES_IP$TotalFlow[i]<-NA
if (length(VPDESFlows$`Total Flow Null`[VPDESFlows$`Permit Number`==VPDES_IP$VAP_PMT_NO[i]])>0){
VPDES_IP$TotalFlow[i]<-VPDESFlows$`Total Flow Null`[VPDESFlows$`Permit Number`==VPDES_IP$VAP_PMT_NO[i]]
}
}
#Add a column to the list of ECHO facilities with the number of outfalls in ECHO in 2017
for (i in 1:length(a$VAP_PMT_NO)){
a$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==a$VAP_PMT_NO[i]]))
}
#Analysis of ECHO data, providing all values for all statistics reported for a given facility
#First, flip flow frame to show statistical codes in columns rather than rows
FlowFrameFlipped<-FlowFrame[,c('VPDESID','Flow','Limit','Code')]
FlowFrameFlipped<-reshape(FlowFrameFlipped,idvar='VPDESID',timevar = 'Code',direction='wide')
#Add in VPDES IDs for each outfall
for (i in 1:length(FlowFrameFlipped$VPDESID)){
FlowFrameFlipped$ECHOID[i]<-as.character(FlowFrame$ECHOID[FlowFrame$VPDESID==FlowFrameFlipped$VPDESID[i]][1])
}
#Add an identifier so that each outfall's facility ID is held in a single column
for (i in 1:length(All$VPDESID)){
if(is.na(All$VAP_PMT_NO[i])){
All$FacilityID[i]<-as.character(All$ECHOID[i])
}else{
All$FacilityID[i]<-as.character(All$VAP_PMT_NO[i])
}
}
#Basic functions for analysis
#'plus' is a modified sum function that will reveal if all values in a vector are NA
plus<-function(x){
if(all(is.na(x))){
c(NA)
}else{
sum(x,na.rm = TRUE)}
}
#Use VPDESID to provide a center for an inner join such that
#data frame 'All' contains every outfall from ECHO and VPDES
All<-merge(VPDES_IP,FlowFrameFlipped,by="VPDESID",all=T)
#'NAcount' counts the number of NAs in a vector
NAcount<-function(x){
sum(is.na(x))
}
#Data reclassification to avoid factors and character classes being assigned to numbers
All$VAP_PMT_NO<-as.character(All$VAP_PMT_NO)
All$DesFlow<-as.numeric(All$DesFlow)
All$TotalFlow<-as.numeric(All$TotalFlow)
#Create a data frame containing data in 'All' aggregated to the facility level
#Thus, data in AllFacs shows a facility ID and then VPDES flow and ECHO stats summed to the
#facility level. It also counts the number of outfalls at each facility reporting NA
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(19:64),funs(plus,NAcount)))
#Organize data such that all similar statistics are reported together
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))#reorganize by searching for a stat in column headers and grouping together those that have the same
order<-c(order,orderi)
}
View(All)
#Use VPDESID to provide a center for an inner join such that
#data frame 'All' contains every outfall from ECHO and VPDES
All<-merge(VPDES_IP,FlowFrameFlipped,by="VPDESID",all=T)
#Add an identifier so that each outfall's facility ID is held in a single column
for (i in 1:length(All$VPDESID)){
if(is.na(All$VAP_PMT_NO[i])){
All$FacilityID[i]<-as.character(All$ECHOID[i])
}else{
All$FacilityID[i]<-as.character(All$VAP_PMT_NO[i])
}
}
View(All)
#Basic functions for analysis
#'plus' is a modified sum function that will reveal if all values in a vector are NA
plus<-function(x){
if(all(is.na(x))){
c(NA)
}else{
sum(x,na.rm = TRUE)}
}
#'NAcount' counts the number of NAs in a vector
NAcount<-function(x){
sum(is.na(x))
}
#Data reclassification to avoid factors and character classes being assigned to numbers
All$VAP_PMT_NO<-as.character(All$VAP_PMT_NO)
All$DesFlow<-as.numeric(All$DesFlow)
All$TotalFlow<-as.numeric(All$TotalFlow)
#Create a data frame containing data in 'All' aggregated to the facility level
#Thus, data in AllFacs shows a facility ID and then VPDES flow and ECHO stats summed to the
#facility level. It also counts the number of outfalls at each facility reporting NA
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(19:64),funs(plus,NAcount)))
#Organize data such that all similar statistics are reported together
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))#reorganize by searching for a stat in column headers and grouping together those that have the same
order<-c(order,orderi)
}
allcols<-seq(1,length(colnames(AllFacs)))
order<-c(allcols[!(allcols %in% order)],order)#Ensure that all columns are present
AllFacs<-AllFacs[,order]#Reorganize by the stat order developed in the immediate preceeding for loop
#Add in facility names lat/long, and number of outfalls from each dataset looking at ECHO first to find data than VPDES (indicated by source data)
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$DesFlow[i]<-All$DesFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
AllFacs$TotalFlow[i]<-All$TotalFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
AllFacs$FacilityName[i]<-NA
if(length(a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]])>0){#If the current examined facility is in the list of ECHO facilities, note that
AllFacs$SourceData[i]<-'ECHO'
AllFacs$FacilityName[i]<-a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
if(is.na(AllFacs$FacilityName[i])){#If its not, than the facility is a VPDES exclusive. Make note of that
AllFacs$FacilityName[i]<-as.character(All$FAC_NAME[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$SourceData[i]<-'VPDES'
}
#Find the number of data reporting outfalls in VPDES and ECHO
AllFacs$ECHOOutfalls[i]<-sum(!(is.na(All$ECHOID[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$TotalOutfalls[i]<-length(All$FacilityID[All$FacilityID==AllFacs$FacilityID[i]])#Find the total number of outfalls
AllFacs$VPDESOutfalls[i]<-length(VPDES$VAP_PMT_NO[VPDES$VAP_PMT_NO==AllFacs$FacilityID[i]])
AllFacs$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==AllFacs$FacilityID[i]]))
}
for (i in 1:length(AllFacs$FacilityID)){
if(AllFacs$SourceData[i]=='ECHO'){#Based on value of source data noted earlier, find lat/long. VPDES lat/long may need to be reprojected, so check ECHO first
AllFacs$lat[i]<-a$FacLat[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$lon[i]<-a$FacLong[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}else{
AllFacs$lat[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$lon[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
}
}
length(a$VAP_PMT_NO %in% VPDES_IP$VAP_PMT_NO)
length(unique(VPDES_IP$VAP_PMT_NO))
length(unique(a$VAP_PMT_NO))
head(VPDES_IP$VAP_PMT_NO)
length(as.character(a$VAP_PMT_NO) %in% as.character(VPDES_IP$VAP_PMT_NO))
length(unique(as.character(VPDES_IP$VAP_PMT_NO)))
length(unique(as.character(a$VAP_PMT_NO)))
length(!(as.character(a$VAP_PMT_NO) %in% as.character(VPDES_IP$VAP_PMT_NO)))
!(as.character(a$VAP_PMT_NO) %in% as.character(VPDES_IP$VAP_PMT_NO))
sum(!(as.character(a$VAP_PMT_NO) %in% as.character(VPDES_IP$VAP_PMT_NO)))
sum((as.character(a$VAP_PMT_NO) %in% as.character(VPDES_IP$VAP_PMT_NO)))
sum((as.character(FlowFrame$ECHOID) %in% as.character(VPDES_IP$VAP_PMT_NO)))
sum(!(as.character(FlowFrame$ECHOID) %in% as.character(VPDES_IP$VAP_PMT_NO)))
#Create a data frame containing data in 'All' aggregated to the facility level
#Thus, data in AllFacs shows a facility ID and then VPDES flow and ECHO stats summed to the
#facility level. It also counts the number of outfalls at each facility reporting NA
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(19:64),funs(plus,NAcount)))
#Organize data such that all similar statistics are reported together
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))#reorganize by searching for a stat in column headers and grouping together those that have the same
order<-c(order,orderi)
}
allcols<-seq(1,length(colnames(AllFacs)))
order<-c(allcols[!(allcols %in% order)],order)#Ensure that all columns are present
AllFacs<-AllFacs[,order]#Reorganize by the stat order developed in the immediate preceeding for loop
#Add in facility names lat/long, and number of outfalls from each dataset looking at ECHO first to find data than VPDES (indicated by source data)
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$FacilityName[i]<-NA
if(length(a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]])>0){#If the current examined facility is in the list of ECHO facilities, note that
AllFacs$SourceData[i]<-'ECHO'
AllFacs$FacilityName[i]<-a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
if(is.na(AllFacs$FacilityName[i])){#If its not, than the facility is a VPDES exclusive. Make note of that
AllFacs$FacilityName[i]<-as.character(All$FAC_NAME[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$SourceData[i]<-'VPDES'
}
#Find the number of data reporting outfalls in VPDES and ECHO
AllFacs$ECHOOutfalls[i]<-sum(!(is.na(All$ECHOID[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$TotalOutfalls[i]<-length(All$FacilityID[All$FacilityID==AllFacs$FacilityID[i]])#Find the total number of outfalls
AllFacs$VPDESOutfalls[i]<-length(VPDES$VAP_PMT_NO[VPDES$VAP_PMT_NO==AllFacs$FacilityID[i]])
AllFacs$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==AllFacs$FacilityID[i]]))
}
for (i in 1:length(AllFacs$FacilityID)){
if(AllFacs$SourceData[i]=='ECHO'){#Based on value of source data noted earlier, find lat/long. VPDES lat/long may need to be reprojected, so check ECHO first
AllFacs$lat[i]<-a$FacLat[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$lon[i]<-a$FacLong[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}else{
AllFacs$lat[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$lon[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
}
AllFacs$DesFlow[i]<-All$DesFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
AllFacs$TotalFlow[i]<-All$TotalFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
}
#Reorder data such that statistics are reported after basic facility information
order<-c(1,seq(length(colnames(AllFacs))-7,length(colnames(AllFacs))),seq(2,length(colnames(AllFacs))-8))#May need manual adjustment if data changes. Basic reorganize
a<-read.csv(uri_summary,stringsAsFactors = F)
https://ofmpub.epa.gov/echo/cwa_rest_services.get_facilities?output=JSON&p_st=VA&p_tribedist=0
uri_query
#Reorder data such that statistics are reported after basic facility information
order<-c(1,seq(length(colnames(AllFacs))-9,length(colnames(AllFacs))),seq(2,length(colnames(AllFacs))-10))#May need manual adjustment if data changes. Basic reorganize
AllFacs<-AllFacs[,order]#Reorganize so that facility info presents before statistics
AllFacs<-AllFacs[order(AllFacs$Flow.MK_plus-AllFacs$DesFlow_plus,decreasing=T),]#Order by largest ECHO/VPDES discrepencies first
#Use VPDESID to provide a center for an inner join such that
#data frame 'All' contains every outfall from ECHO and VPDES
All<-merge(VPDES_IP,FlowFrameFlipped,by="VPDESID",all=T)
#Add an identifier so that each outfall's facility ID is held in a single column
for (i in 1:length(All$VPDESID)){
if(is.na(All$VAP_PMT_NO[i])){
All$FacilityID[i]<-as.character(All$ECHOID[i])
}else{
All$FacilityID[i]<-as.character(All$VAP_PMT_NO[i])
}
}
#Basic functions for analysis
#'plus' is a modified sum function that will reveal if all values in a vector are NA
plus<-function(x){
if(all(is.na(x))){
c(NA)
}else{
sum(x,na.rm = TRUE)}
}
#'NAcount' counts the number of NAs in a vector
NAcount<-function(x){
sum(is.na(x))
}
#Data reclassification to avoid factors and character classes being assigned to numbers
All$VAP_PMT_NO<-as.character(All$VAP_PMT_NO)
All$DesFlow<-as.numeric(All$DesFlow)
All$TotalFlow<-as.numeric(All$TotalFlow)
#Create a data frame containing data in 'All' aggregated to the facility level
#Thus, data in AllFacs shows a facility ID and then VPDES flow and ECHO stats summed to the
#facility level. It also counts the number of outfalls at each facility reporting NA
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(19:64),funs(plus,NAcount)))
#Organize data such that all similar statistics are reported together
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))#reorganize by searching for a stat in column headers and grouping together those that have the same
order<-c(order,orderi)
}
allcols<-seq(1,length(colnames(AllFacs)))
order<-c(allcols[!(allcols %in% order)],order)#Ensure that all columns are present
AllFacs<-AllFacs[,order]#Reorganize by the stat order developed in the immediate preceeding for loop
#Add in facility names lat/long, and number of outfalls from each dataset looking at ECHO first to find data than VPDES (indicated by source data)
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$FacilityName[i]<-NA
if(length(a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]])>0){#If the current examined facility is in the list of ECHO facilities, note that
AllFacs$SourceData[i]<-'ECHO'
AllFacs$FacilityName[i]<-a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
if(is.na(AllFacs$FacilityName[i])){#If its not, than the facility is a VPDES exclusive. Make note of that
AllFacs$FacilityName[i]<-as.character(All$FAC_NAME[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$SourceData[i]<-'VPDES'
}
#Find the number of data reporting outfalls in VPDES and ECHO
AllFacs$ECHOOutfalls[i]<-sum(!(is.na(All$ECHOID[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$TotalOutfalls[i]<-length(All$FacilityID[All$FacilityID==AllFacs$FacilityID[i]])#Find the total number of outfalls
AllFacs$VPDESOutfalls[i]<-length(VPDES$VAP_PMT_NO[VPDES$VAP_PMT_NO==AllFacs$FacilityID[i]])
AllFacs$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==AllFacs$FacilityID[i]]))
}
for (i in 1:length(AllFacs$FacilityID)){
if(AllFacs$SourceData[i]=='ECHO'){#Based on value of source data noted earlier, find lat/long. VPDES lat/long may need to be reprojected, so check ECHO first
AllFacs$lat[i]<-a$FacLat[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$lon[i]<-a$FacLong[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}else{
AllFacs$lat[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$lon[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
}
AllFacs$DesFlow[i]<-All$DesFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
AllFacs$TotalFlow[i]<-All$TotalFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
}
#Reorder data such that statistics are reported after basic facility information
order<-c(1,seq(length(colnames(AllFacs))-9,length(colnames(AllFacs))),seq(2,length(colnames(AllFacs))-10))#May need manual adjustment if data changes. Basic reorganize
order
colnames(AllFacs)[94]
colnames(AllFacs)[95]
colnames(AllFacs)[96]
colnames(AllFacs)[103]
colnames(AllFacs)[2:11]
colnames(AllFacs)[94:103]
names(a)[names(a)=="SourceID"]<-"VAP_PMT_NO"#Need to rename to give a central columnn name for future joins
#Use VPDESID to provide a center for an inner join such that
#data frame 'All' contains every outfall from ECHO and VPDES
All<-merge(VPDES_IP,FlowFrameFlipped,by="VPDESID",all=T)
#Add an identifier so that each outfall's facility ID is held in a single column
for (i in 1:length(All$VPDESID)){
if(is.na(All$VAP_PMT_NO[i])){
All$FacilityID[i]<-as.character(All$ECHOID[i])
}else{
All$FacilityID[i]<-as.character(All$VAP_PMT_NO[i])
}
}
#Basic functions for analysis
#'plus' is a modified sum function that will reveal if all values in a vector are NA
plus<-function(x){
if(all(is.na(x))){
c(NA)
}else{
sum(x,na.rm = TRUE)}
}
#'NAcount' counts the number of NAs in a vector
NAcount<-function(x){
sum(is.na(x))
}
All$DesFlow<-as.numeric(All$DesFlow)
#Data reclassification to avoid factors and character classes being assigned to numbers
All$VAP_PMT_NO<-as.character(All$VAP_PMT_NO)
All$TotalFlow<-as.numeric(All$TotalFlow)
#Create a data frame containing data in 'All' aggregated to the facility level
#Thus, data in AllFacs shows a facility ID and then VPDES flow and ECHO stats summed to the
#facility level. It also counts the number of outfalls at each facility reporting NA
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(19:64),funs(plus,NAcount)))
#Organize data such that all similar statistics are reported together
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))#reorganize by searching for a stat in column headers and grouping together those that have the same
order<-c(order,orderi)
}
allcols<-seq(1,length(colnames(AllFacs)))
order<-c(allcols[!(allcols %in% order)],order)#Ensure that all columns are present
AllFacs<-AllFacs[,order]#Reorganize by the stat order developed in the immediate preceeding for loop
#Add in facility names lat/long, and number of outfalls from each dataset looking at ECHO first to find data than VPDES (indicated by source data)
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$FacilityName[i]<-NA
if(length(a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]])>0){#If the current examined facility is in the list of ECHO facilities, note that
AllFacs$SourceData[i]<-'ECHO'
AllFacs$FacilityName[i]<-a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
if(is.na(AllFacs$FacilityName[i])){#If its not, than the facility is a VPDES exclusive. Make note of that
AllFacs$FacilityName[i]<-as.character(All$FAC_NAME[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$SourceData[i]<-'VPDES'
}
#Find the number of data reporting outfalls in VPDES and ECHO
AllFacs$ECHOOutfalls[i]<-sum(!(is.na(All$ECHOID[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$TotalOutfalls[i]<-length(All$FacilityID[All$FacilityID==AllFacs$FacilityID[i]])#Find the total number of outfalls
AllFacs$VPDESOutfalls[i]<-length(VPDES$VAP_PMT_NO[VPDES$VAP_PMT_NO==AllFacs$FacilityID[i]])
AllFacs$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==AllFacs$FacilityID[i]]))
}
for (i in 1:length(AllFacs$FacilityID)){
if(AllFacs$SourceData[i]=='ECHO'){#Based on value of source data noted earlier, find lat/long. VPDES lat/long may need to be reprojected, so check ECHO first
AllFacs$lat[i]<-a$FacLat[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$lon[i]<-a$FacLong[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}else{
AllFacs$lat[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
AllFacs$lon[i]<-as.numeric(All$coords.x1[All$VAP_PMT_NO==AllFacs$FacilityID[i]])[1]
}
AllFacs$DesFlow[i]<-All$DesFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
AllFacs$TotalFlow[i]<-All$TotalFlow[All$FacilityID==AllFacs$FacilityID[i]][1]
}
#Reorder data such that statistics are reported after basic facility information
order<-c(1,seq(length(colnames(AllFacs))-9,length(colnames(AllFacs))),seq(2,length(colnames(AllFacs))-10))#May need manual adjustment if data changes. Basic reorganize
order
colnames(AllFacs)[92:101]
View(All)
i=1
!is.na(a$CWPActualAverageFlowNmbr[i])
i=2
!is.na(a$CWPActualAverageFlowNmbr[i])
i=3
!is.na(a$CWPActualAverageFlowNmbr[i])
i=1
!is.na(a$CWPTotalDesignFlowNmbr[i])
a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
a$VAP_PMT_NO[i]
i=1892
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]>0)){
diff[i]<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
}
}
}
a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff[i]<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-0
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]>0)){
store<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
cbind(diff,store)
}
}
}
diff<-numeric(0)
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]>0)){
store<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-cbind(diff,store)
}
}
}
diff
diff<-numeric(0)
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]>0)){
store<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-c(diff,store)
}
}
}
diff
i=161
!is.na(a$CWPTotalDesignFlowNmbr[i])
length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]>0)
length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0
diff<-numeric(0)
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0){
store<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-c(diff,store)
}
}
}
diff
i=161
!is.na(a$CWPTotalDesignFlowNmbr[i])
length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0
a$CWPTotalDesignFlowNmbr[i]
AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-numeric(!is.na(a$CWPTotalDesignFlowNmbr))
!is.na(a$CWPTotalDesignFlowNmbr)
T+T
diff<-numeric(sum(!is.na(a$CWPTotalDesignFlowNmbr)))
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0){
diff[i]<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
}
}
}
diff
diff<-numeric(0)
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0){
store<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-c(diff,store)
}
}
}
diff
diff<-numeric(0)
ind<-numeric(0)
for (i in 1:length(a$CWPTotalDesignFlowNmbr)){
if(!is.na(a$CWPTotalDesignFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0){
store<-a$CWPTotalDesignFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-c(diff,store)
ind<-c(ind,i)
}
}
}
diff
ind
i=554
!is.na(a$CWPTotalDesignFlowNmbr[i])
length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0
a$CWPTotalDesignFlowNmbr[i]
AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
1==NA
diff<-numeric(0)
ind<-numeric(0)
for (i in 1:length(a$CWPActualAverageFlowNmbr)){
if(!is.na(a$CWPActualAverageFlowNmbr[i])){
if(length(AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]])>0){
store<-a$CWPActualAverageFlowNmbr[i]==AllFacs$DesFlow[AllFacs$FacilityID==a$VAP_PMT_NO[i]]
diff<-c(diff,store)
ind<-c(ind,i)
}
}
}
diff
sum(!is.na(a$CWPActualAverageFlowNmbr[i]))
sum(!is.na(a$CWPActualAverageFlowNmbr))
