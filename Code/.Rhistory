b<-b[b$parameter_code==50050,]
features<-unique(b$perm_feature_nmbr)
for (j in 1:length(features)){
if(!is.na(as.numeric(features[j]))){
addedzeroes<-paste(rep(0,3-nchar(features[j])),collapse = '')
features[j]<-paste0(addedzeroes,as.character(features[j]))
} else{
features[j]<-as.character(features[j])
}
}
VAID<-paste0(sourceID,features)
sourceID<-rep(sourceID,length(VAID))
feat_num<-c(feat_num,features)
VPDESID<-c(VPDESID,VAID)
ECHOID<-c(ECHOID,sourceID)
}
VPDESID<-"";VPDESID<-VPDESID[-1]
ECHOID<-"";ECHOID<-ECHOID[-1]
feat_num<-"";feat_num<-feat_num[-1]
for (i in 1:length(DMR_wsummary$SourceID)){
sourceID<-as.character(DMR_wsummary$SourceID[i])
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
b<-b[b$parameter_code==50050,]
features<-unique(b$perm_feature_nmbr)
for (j in 1:length(features)){
if(!is.na(as.numeric(features[j]))){
addedzeroes<-paste(rep(0,3-nchar(features[j])),collapse = '')
features[j]<-paste0(addedzeroes,as.character(features[j]))
} else{
features[j]<-as.character(features[j])
}
}
VAID<-paste0(sourceID,features)
sourceID<-rep(sourceID,length(VAID))
feat_num<-c(feat_num,features)
VPDESID<-c(VPDESID,VAID)
ECHOID<-c(ECHOID,sourceID)
}
ECHOConvWater<-data.frame(ECHOID,VPDESID,feat_num)
ECHOConvWater$PermitStatus<-numeric(length(ECHOConvWater$ECHOID))
for (i in 1:length(ECHOConvWater$ECHOID)){
ECHOConvWater$PermitStatus[i]<-a$CWPPermitStatusDesc[a$SourceID==ECHOConv$ECHOID[i]]
}
View(ECHOConvWater)
length(ECHOConvWater$PermitStatus[ECHOConvWater$PermitStatus=='Expired'|ECHOConvWater$PermitStatus=='Terminated'])
length(unique(ECHOConvWater$ECHOID[ECHOConvWater$PermitStatus=='Expired'|ECHOConvWater$PermitStatus=='Terminated']))
library(foreign)
VPDES<-read.dbf("C:/Users/connorb5/Desktop/Shapefiles/VPDES_OUTFALLS.dbf")
OLDVPDES<-read.dbf("C:/Users/connorb5/Desktop/Shapefiles/OldVPDES.dbf")
View(VPDES)
names(VPDES)<-c("OBJECTID","OUTFALLNO","VAP_PMT_NO","VAP_TYPE","VAP_TYPE_ALT_VERSION","FAC_NAME","VAP_MAJOR_MINOR","OBJECTID*")
VPDES_IP<-VPDES[VPDES$VAP_TYPE=='VPDES_IP',]
length(unique(VPDES_IP$VAP_PMT_NO))
VPDES_IP[!(VPDES_IP$VAP_PMT_NO %in% ECHOConv$ECHOID),]
length(VPDES_IP[!(VPDES_IP$VAP_PMT_NO %in% ECHOConv$ECHOID),]$OBJECTID)
length(VPDES_IP[!(VPDES_IP$OUTFALLNO %in% ECHOConv$VPDESID),]$OBJECTID)
length(OLDVPDES[!(OLDVPDES$VPDESID %in% ECHOConv$VPDESID),]$OBJECTID)
length(OLDVPDES[!(OLDVPDES$VPP_PERMIT %in% ECHOConv$ECHOID),]$OBJECTID)
Flow<-0;Flow<-Flow[-1]
Unit<-"";Unit<-Unit[-1]
Limit<-0;Limit<-Limit[-1]
VPDESID<-"";VPDESID<-VPDESID[-1]
ECHOID<-"";ECHOID<-ECHOID[-1]
feat_num<-"";feat_num<-feat_num[-1]
Code<-'';Code<-Code[-1]
Coded<-'';Coded<-Coded[-1]
for (i in 1:length(ECHOConv$feat_num)){
sourceID<-as.character(ECHOConv$ECHOID[i])
outfall<-as.character(ECHOConv$feat_num[i])
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&outfall=",outfall,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
b<-b[b$parameter_code==50050,]
codes<-unique(b$statistical_base_code)
Flowi<-numeric(length(codes))
Uniti<-numeric(length(codes))
Limiti<-numeric(length(codes))
Codedi<-unique(b$statistical_base_code)
for (j in 1:length(codes)){
Flowi[j]<-mean(b$dmr_value_nmbr[b$statistical_base_code==codes[j]],na.rm=T)
Uniti[j]<-unique(b$standard_unit_desc[b$statistical_base_code==codes[j]])
LimitswNA<-unique(b$limit_value_nmbr[b$statistical_base_code==codes[j]])
if(length(LimitswNA)>1){#Occasionally limits report as NA which can alter this code
if(length(LimitswNA[!is.na(LimitswNA)])>1){
warning("More than one real limit found, only using median of latest permit")
Limiti[j]<-median(b$limit_value_nmbr[b$statistical_base_code==codes[j]&b$limit_end_date==max(b$limit_end_date[b$statistical_base_code==codes[j]],na.rm=T)],na.rm=T)
}else{
Limiti[j]<-LimitswNA[!is.na(LimitswNA)]
}
}else{
Limiti[j]<-LimitswNA
}
Codedi[j]<-unique(b$statistical_base_short_desc[b$statistical_base_code==codes[j]])
}
Flow<-c(Flow,Flowi)
Unit<-c(Unit,Uniti)
Limit<-c(Limit,Limiti)
Code<-c(Code,codes)
Coded<-c(Coded,Codedi)
feat_num<-c(feat_num,rep(outfall,length(codes)))
VPDESID<-c(VPDESID,rep(as.character(ECHOConv$VPDESID[i]),length(codes)))
ECHOID<-c(ECHOID,rep(sourceID,length(codes)))
}
#These next few lines subset and export the data developed in the above loops
FlowFrame<-data.frame(ECHOID,VPDESID,feat_num,Flow,Unit,Limit,Code,Coded)
View(OLDVPDES)
Flow
Flow<-0;Flow<-Flow[-1]
Unit<-"";Unit<-Unit[-1]
Limit<-0;Limit<-Limit[-1]
VPDESID<-"";VPDESID<-VPDESID[-1]
ECHOID<-"";ECHOID<-ECHOID[-1]
feat_num<-"";feat_num<-feat_num[-1]
Code<-'';Code<-Code[-1]
Coded<-'';Coded<-Coded[-1]
for (i in 1:length(ECHOConvWater$feat_num)){
sourceID<-as.character(ECHOConvWater$ECHOID[i])
outfall<-as.character(ECHOConvWater$feat_num[i])
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&outfall=",outfall,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
b<-b[b$parameter_code==50050,]
codes<-unique(b$statistical_base_code)
Flowi<-numeric(length(codes))
Uniti<-numeric(length(codes))
Limiti<-numeric(length(codes))
Codedi<-unique(b$statistical_base_code)
for (j in 1:length(codes)){
Flowi[j]<-mean(b$dmr_value_nmbr[b$statistical_base_code==codes[j]],na.rm=T)
Uniti[j]<-unique(b$standard_unit_desc[b$statistical_base_code==codes[j]])
LimitswNA<-unique(b$limit_value_nmbr[b$statistical_base_code==codes[j]])
if(length(LimitswNA)>1){#Occasionally limits report as NA which can alter this code
if(length(LimitswNA[!is.na(LimitswNA)])>1){
warning("More than one real limit found, only using median of latest permit")
Limiti[j]<-median(b$limit_value_nmbr[b$statistical_base_code==codes[j]&b$limit_end_date==max(b$limit_end_date[b$statistical_base_code==codes[j]],na.rm=T)],na.rm=T)
}else{
Limiti[j]<-LimitswNA[!is.na(LimitswNA)]
}
}else{
Limiti[j]<-LimitswNA
}
Codedi[j]<-unique(b$statistical_base_short_desc[b$statistical_base_code==codes[j]])
}
Flow<-c(Flow,Flowi)
Unit<-c(Unit,Uniti)
Limit<-c(Limit,Limiti)
Code<-c(Code,codes)
Coded<-c(Coded,Codedi)
feat_num<-c(feat_num,rep(outfall,length(codes)))
VPDESID<-c(VPDESID,rep(as.character(ECHOConv$VPDESID[i]),length(codes)))
ECHOID<-c(ECHOID,rep(sourceID,length(codes)))
}
#These next few lines subset and export the data developed in the above loops
FlowFrame<-data.frame(ECHOID,VPDESID,feat_num,Flow,Unit,Limit,Code,Coded)
OLDVPDES<-read.dbf("C:/Users/connorb5/Downloads/VPDES_OUTFALLS.dbf")
View(OLDVPDES)
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE)0&OLDVPDES$LONGITUDE>0,]
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE>0&OLDVPDES$LONGITUDE>0,]
OLDVPDES<-read.dbf("C:/Users/connorb5/Downloads/VPDES_OUTFALLS.dbf")
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE!=0&OLDVPDES$LONGITUDE!=0,]
OLDVPDES<-OLDVPDES[-3117]
OLDVPDES<-OLDVPDES[-3117]
OLDVPDES<-OLDVPDES[-1]
OLDVPDES<-OLDVPDES[-1]
OLDVPDES<-OLDVPDES[-1,]
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE!=0&OLDVPDES$LONGITUDE!=0,]
OLDVPDES<-read.dbf("C:/Users/connorb5/Downloads/VPDES_OUTFALLS.dbf")
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE!=0&OLDVPDES$LONGITUDE!=0,]
OLDVPDES<-OLDVPDES[-3117,]
OLDVPDES<-read.dbf("C:/Users/connorb5/Downloads/VPDES_OUTFALLS.dbf")
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE!=0&OLDVPDES$LONGITUDE!=0,]
View(OLDVPDES)
OLDVPDES[3117,]
OLDVPDES[3118,]
OLDVPDES[3116,]
OLDVPDES[3171,]
View(OLDVPDES)
OLDVPDES[2997,]
OLDVPDES<-OLDVPDES[-2997,]
ECHOConvWater$PermitStatus<-numeric(length(ECHOConvWater$ECHOID))
for (i in 1:length(ECHOConvWater$ECHOID)){
ECHOConvWater$PermitStatus[i]<-a$CWPPermitStatusDesc[a$SourceID==ECHOConvWater$ECHOID[i]]
}
View(FlowFrame)
test<-FlowFrame[FlowFrame$Code=='MK',]
View(test)
head(merge(OLDVPDES,test,by="VPDESID"))
OldVPDES_ECHOMerge<-merge(OLDVPDES,test,by="VPDESID")
View(OldVPDES_ECHOMerge)
plot(OldVPDES_ECHOMerge$Limit,OldVPDES_ECHOMerge$VPP_DES_FL)
LeftOldVPDES<-OLDVPDES[(OLDVPDES$VPDESID %in% test$VPDESID)]
LeftOldVPDES<-OLDVPDES[(OLDVPDES$VPDESID %in% test$VPDESID),]
LeftOldVPDES<-OLDVPDES[!(OLDVPDES$VPDESID %in% test$VPDESID),]
FlowFrameFlipped<-FlowFrame[,c('VPDESID','Flow','Limit','Code')]
FlowFrameFlipped<-reshape(FlowFrameFlipped,idvar='VPDESID',timevar = 'Code',direction='wide')
for (i in 1:length(FlowFrameFlipped$VPDESID)){
FlowFrameFlipped$ECHOID[i]<-as.character(FlowFrame$ECHOID[FlowFrame$VPDESID==FlowFrameFlipped$VPDESID[i]][1])
}
All<-merge(OLDVPDES,FlowFrameFlipped,by="VPDESID",all=T)
for (i in 1:length(All$VPDESID)){
if(is.na(All$VPP_PERMIT[i])){
All$FacilityID[i]<-as.character(All$ECHOID[i])
}else{
All$FacilityID[i]<-as.character(All$VPP_PERMIT[i])
}
}
plus<-function(x){
if(all(is.na(x))){
c(NA)
}else{
sum(x,na.rm = TRUE)}
}
NAcount<-function(x){
sum(is.na(x))
}
All$VPP_PERMIT<-as.character(All$VPP_PERMIT)
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(c(19,21,42:87)),funs(plus,NAcount)))
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))
order<-c(order,orderi)
}
allcols<-seq(1,length(colnames(AllFacs)))
order<-c(allcols[!(allcols %in% order)],order)
AllFacs<-AllFacs[,order]
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$FacilityName[i]<-as.character(All$FAC_NAME[All$VPP_PERMIT==AllFacs$FacilityID[i]])[1]
AllFacs$SourceData[i]<-'VPDES'
if(is.na(AllFacs$FacilityName[i])){
AllFacs$FacilityName[i]<-a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$SourceData[i]<-'ECHO'
}
AllFacs$VPDESOutfalls[i]<-sum(!(is.na(All$VPP_PERMIT[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$ECHOOutfalls[i]<-sum(!(is.na(All$ECHOID[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$TotalOutfalls[i]<-length(All$FacilityID[All$FacilityID==AllFacs$FacilityID[i]])
AllFacs$VPDES2017Outfalls[i]<-length(VPDES$VAP_PMT_NO[VPDES$VAP_PMT_NO==AllFacs$FacilityID[i]])
AllFacs$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==AllFacs$FacilityID[i]]))
}
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$lat[i]<-as.numeric(All$LATITUDE[All$VPP_PERMIT==AllFacs$FacilityID[i]])[1]
if(is.na(AllFacs$lat[i])){
AllFacs$lat[i]<-a$FacLat[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
}
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$lon[i]<-as.numeric(All$LONGITUDE[All$VPP_PERMIT==AllFacs$FacilityID[i]])[1]
if(is.na(AllFacs$lon[i])){
AllFacs$lon[i]<-a$FacLong[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
}
order<-c(1,seq(length(colnames(AllFacs))-8,length(colnames(AllFacs))),seq(2,length(colnames(AllFacs))-9))
AllFacs<-AllFacs[,order]
AllFacs<-AllFacs[order(AllFacs$Flow.MK_plus-AllFacs$VPP_DES_FL_plus,decreasing=T),]
library(foreign)
library(rgdal)
library(dplyr)
temp<-tempfile()
download.file("http://www.deq.virginia.gov/mapper_ext/GIS_Datasets/VPDES_Geodatabase.zip",temp)
unzip(temp,exdir="C:/Users/connorb5/Desktop/USGS Testing")
VPDES<-as.data.frame(readOGR("C:/Users/connorb5/Desktop/USGS Testing/VPDES_Geodatabase.gdb",layer="VPDES_OUTFALLS"))
OLDVPDES<-read.dbf("C:/Users/connorb5/Desktop/Shapefiles/OLDVPDESHUC8.dbf")
OLDVPDES<-OLDVPDES[OLDVPDES$LATITUDE!=0&OLDVPDES$LONGITUDE!=0,]
OLDVPDES<-OLDVPDES[-2997,]
dups<-as.character(OLDVPDES$VPDESID[duplicated(OLDVPDES$VPDESID,fromLast = T)])
OLDVPDES<-OLDVPDES %>% distinct(VPDESID,.keep_all=T)
VPDES_IP<-VPDES[VPDES$VAP_TYPE=='VPDES_IP',]
ECHOConv<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2016 ECHO/ECHOConv.csv",stringsAsFactors = F)
ECHOConvWater<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2016 ECHO/ECHOConvWater.csv",stringsAsFactors = F)
names(VPDES)[1]<-"VPDESID"
names(a)[1]<-"VAP_PMT_NO"
FlowFrame<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2016 ECHO/FlowFrame2016.csv",stringsAsFactors = F)
FlowFrameNew<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2017 ECHO/FlowFrame.csv",stringsAsFactors = F)
CodeKey<-read.csv("https://echo.epa.gov/system/files/REF_ICIS-NPDES_STATISTICAL_BASE.csv",stringsAsFactors = F,na.strings = 'BLANK')
FlowFrameFlipped<-FlowFrame[,c('VPDESID','Flow','Limit','Code')]
FlowFrameFlipped<-reshape(FlowFrameFlipped,idvar='VPDESID',timevar = 'Code',direction='wide')
for (i in 1:length(FlowFrameFlipped$VPDESID)){
FlowFrameFlipped$ECHOID[i]<-as.character(FlowFrame$ECHOID[FlowFrame$VPDESID==FlowFrameFlipped$VPDESID[i]][1])
}
All<-merge(OLDVPDES,FlowFrameFlipped,by="VPDESID",all=T)
for (i in 1:length(All$VPDESID)){
if(is.na(All$VPP_PERMIT[i])){
All$FacilityID[i]<-as.character(All$ECHOID[i])
}else{
All$FacilityID[i]<-as.character(All$VPP_PERMIT[i])
}
}
plus<-function(x){
if(all(is.na(x))){
c(NA)
}else{
sum(x,na.rm = TRUE)}
}
NAcount<-function(x){
sum(is.na(x))
}
All$VPP_PERMIT<-as.character(All$VPP_PERMIT)
AllFacs<-as.data.frame(All %>% group_by(FacilityID) %>% summarize_at(vars(c(19,21,42:87)),funs(plus,NAcount)))
headers<-as.character(unique(FlowFrame$Code))
order<-numeric(0)
for (i in 1:length(headers)){
orderi<-grep(headers[i],colnames(AllFacs))
order<-c(order,orderi)
}
allcols<-seq(1,length(colnames(AllFacs)))
order<-c(allcols[!(allcols %in% order)],order)
AllFacs<-AllFacs[,order]
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$FacilityName[i]<-as.character(All$FAC_NAME[All$VPP_PERMIT==AllFacs$FacilityID[i]])[1]
AllFacs$SourceData[i]<-'VPDES'
if(is.na(AllFacs$FacilityName[i])){
AllFacs$FacilityName[i]<-a$CWPName[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
AllFacs$SourceData[i]<-'ECHO'
}
AllFacs$VPDESOutfalls[i]<-sum(!(is.na(All$VPP_PERMIT[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$ECHOOutfalls[i]<-sum(!(is.na(All$ECHOID[All$FacilityID==AllFacs$FacilityID[i]])))
AllFacs$TotalOutfalls[i]<-length(All$FacilityID[All$FacilityID==AllFacs$FacilityID[i]])
AllFacs$VPDES2017Outfalls[i]<-length(VPDES$VAP_PMT_NO[VPDES$VAP_PMT_NO==AllFacs$FacilityID[i]])
AllFacs$ECHO2017Outfalls[i]<-length(unique(FlowFrameNew$VPDESID[FlowFrameNew$ECHOID==AllFacs$FacilityID[i]]))
}
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$lat[i]<-as.numeric(All$LATITUDE[All$VPP_PERMIT==AllFacs$FacilityID[i]])[1]
if(is.na(AllFacs$lat[i])){
AllFacs$lat[i]<-a$FacLat[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
}
for (i in 1:length(AllFacs$FacilityID)){
AllFacs$lon[i]<-as.numeric(All$LONGITUDE[All$VPP_PERMIT==AllFacs$FacilityID[i]])[1]
if(is.na(AllFacs$lon[i])){
AllFacs$lon[i]<-a$FacLong[a$VAP_PMT_NO==AllFacs$FacilityID[i]]
}
}
order<-c(1,seq(length(colnames(AllFacs))-8,length(colnames(AllFacs))),seq(2,length(colnames(AllFacs))-9))
AllFacs<-AllFacs[,order]
AllFacs<-AllFacs[order(AllFacs$Flow.MK_plus-AllFacs$VPP_DES_FL_plus,decreasing=T),]
View(AllFacs)
write.csv(AllFacs,"G:/My Drive/USGS_ConsumptiveUse/Fall Semester, 2017/Connor/.FacTable.csv")
order<-grep('plus',colnames(AllFacs))
PlusFacs<-AllFacs[,order]
FacSummary<-data.frame(Stat=colnames(PlusFacs),StatCode=character(length(colnames(PlusFacs))),Description=character(length(colnames(PlusFacs))),Present=numeric(length(colnames(PlusFacs))))
FacSummary$Stat<-as.character(FacSummary$Stat);FacSummary$StatCode<-as.character(FacSummary$StatCode);FacSummary$Description<-as.character(FacSummary$Description)
for (i in 1:length(colnames(PlusFacs))){
column<-as.vector(PlusFacs[,i])
FacSummary$StatCode[i]<-gsub(".*[.]([^_]+)[_].*","\\1",FacSummary$Stat[i])
FacSummary$Description[i]<-NA
if(FacSummary$StatCode[i] %in% CodeKey$STATISTICAL_BASE_CODE){
FacSummary$Description[i]<-CodeKey$STATISTICAL_BASE_LONG_DESC[CodeKey$STATISTICAL_BASE_CODE==FacSummary$StatCode[i]]
}
FacSummary$Present[i]<-sum(!(is.na(column)))
FacSummary$SumValue[i]<-plus(column)
}
order<-grep('Limit',as.character(FacSummary$Stat))
FacSummaryLimits<-FacSummary[order,]
FacSummaryFlow<-FacSummary[-order,]
View(FacSummaryFlow)
CaseStudies<-AllFacs[(AllFacs$VPDESOutfalls==AllFacs$ECHOOutfalls)&(AllFacs$VPP_DES_FL_plus<AllFacs$Flow.MK_plus),]#&(AllFacs$Flow.MK_NAcount==0),]
CaseStudies<-CaseStudies[order(CaseStudies$Flow.MK_plus-CaseStudies$VPP_DES_FL_plus,decreasing=T),]
bleep<-CaseStudies[1,]
bleep[2,]<-CaseStudies[1,]
CaseStudies<-AllFacs[AllFacs$FacilityID %in% c('VA0057576','VA0091995','VA0005860','VA0059137','VA0052655','VA0053317','VA0029785','VA0005720','VA0052451','VA0050181'),]
CaseStudies$Withdraw[1]<-NA
CaseStudies$Withdraw[2]<-NA
CaseStudies$Withdraw[3]<-NA
CaseStudies$Withdraw[4]<-6523783/365
CaseStudies$Withdraw[5]<-0/365
CaseStudies$Withdraw[6]<-3.86/365
CaseStudies$Withdraw[7]<-NA
CaseStudies$Withdraw[8]<-NA
CaseStudies$Withdraw[9]<-1186.45/365
CaseStudies$Withdraw[10]<-NA
View(CaseStudies)
CaseStudies$Withdraw
write.csv(CaseStudies,"G:/My Drive/USGS_ConsumptiveUse/Fall Semester, 2017/Connor/CaseStudies.csv")
library(XML)
library(RCurl)
library(dplyr)
library(foreign)
library(rgdal)
state<-"VA"
startDate<-"01/01/2016"
endDate<-"12/31/2016"
sourceID<-"VA0060844"
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
ECHOConv<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2016 ECHO/ECHOConv.csv",stringsAsFactors = F)
ECHOConvWater<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2016 ECHO/ECHOConvWater.csv",stringsAsFactors = F)
ECHOConv<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2017 ECHO/ECHOConv.csv",stringsAsFactors = F)
ECHOConvWater<-read.csv("c:/Users/connorb5/Desktop/USGS Testing/2017 ECHO/ECHOConvWater.csv",stringsAsFactors = F)
unique(ECHOConv$ECHOID)
View(b)
b<-b[b$parameter_code==50050,]
View(b)
View(AllFacs)
order<-grep('plus',colnames(AllFacs))
order2<-grep('Limit',order)
order<-order[!(order %in% order2)]
order
test<-AllFacs[,order]
View(test)
View(FacSummary)
View(FacSummaryFlow)
order<-c(1,2,grep('plus',colnames(AllFacs)))
order2<-grep('Limit',order)
order<-order[!(order %in% order2)]
test<-AllFacs[,order]
grep('Limit',order)
order<-c(1,2,grep('plus',colnames(AllFacs)))
order2<-grep('Limit',AllFacs[,order])
order<-order[!(order %in% order2)]
test<-AllFacs[,order]
order<-c(1,2,grep('plus',colnames(AllFacs)))
grep('Limit',AllFacs[,order])
AllFacs[,order]
order<-c(1,2,grep('plus',colnames(AllFacs)))
order2<-grep('Limit',colnames(AllFacs[,order]))
order<-order[!(order %in% order2)]
test<-AllFacs[,order]
test<-test[,-'VPP_DES_FL_plus']
test<-test[,-3]
i=1
is.na(test[i,3:length(rownames(test))])
is.na(test[i,3:length(colnames(test))])
rowsum(is.na(test[i,3:length(colnames(test))]))
rowsum((test[i,3:length(colnames(test))]))
?rowsum
rowsum((test[3:length(colnames(test))]))
rowSums((test[i,3:length(colnames(test))]))
rowSums(test[i,3:length(colnames(test))])
rowSums(is.na(test[i,3:length(colnames(test))]))
rowSums(!is.na(test[i,3:length(colnames(test))]))
i=4
rowsum(is.na(test[i,3:length(colnames(test))]))
rowSums(is.na(test[i,3:length(colnames(test))]))
rowSums(!is.na(test[i,3:length(colnames(test))]))
for (i in 1:length(test$FacilityID)){
test$StatTotal[i]<-rowSums(!is.na(test[i,3:length(colnames(test))]))
}
hist(test$StatTotal)
sourceID<-"VA0003697"
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
b<-b[b$parameter_code==50050,]
View(b)
sourceID<-"VA0084298"
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
View(b)
b<-b[b$parameter_code==50050,]
sourceID<-"VA0002151"
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
b<-b[b$parameter_code==50050,]
sourceID<-"VA0076856"
uri_effluent<-paste0("https://ofmpub.epa.gov/echo/eff_rest_services.download_effluent_chart?p_id=",sourceID,"&start_date=",startDate,"&end_date=",endDate)
b<-read.csv(uri_effluent,stringsAsFactors = F)
b<-b[b$parameter_code==50050,]
View(b)
View(FlowFrame)
View(FlowFrameFlipped)
FlowFrameFlipped<-FlowFrame[,c('VPDESID','Flow','Limit','Code')]
FlowFrameFlipped<-reshape(FlowFrameFlipped,idvar='VPDESID',timevar = 'Code',direction='wide')
load("C:/Users/connorb5/Desktop/FlowFrameUpdate.RData")
FlowFrameFlipped<-FlowFrame[,c('VPDESID','Flow','Limit','Code')]
FlowFrameFlipped<-reshape(FlowFrameFlipped,idvar='VPDESID',timevar = 'Code',direction='wide')
View(FlowFrame)
View(b)
View(FacSummaryFlow)
View(a)
View(FacSummaryFlow)
#Required inputs: State, Flow frame from ECHO run, flow frame from 2017 (shows change in outfalls),
#and VA Hydro facility list (http://deq1.bse.vt.edu/d.bet/vahydro_facilities)
#VA Hydro facility list and VPDES info spreadsheet are manual downloads due to slow internet connections, making it difficult to access without R timing out
#input/output path will also be required as the script needs a place to store downloads from VPDES
state<-"VA"
path<-"G:/My Drive/USGS_ConsumptiveUse/Spring Semester, 2018/Connor/USGS Testing"
#Get ECHO Facility List and store in dataframe 'a'
uri_query<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_facilities?output=XML&p_st=",state,"&p_tribedist=0")
ECHO_xml<-getURL(uri_query)
ECHO_query<-xmlParse(ECHO_xml)
QID<-xmlToList(ECHO_query)
QID<-QID$QueryID
uri_summary<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_download?output=CSV&qid=",QID)
#This code is intended to take inputs from external VPDES databases and combine them with outputs from ECHO, creating merged datasets
#It also formats and organizes data and searches for lat/long values to assign to VA Hydro MPs/Facs and those from ECHO
#######################
#Library Initialization
library(foreign)
library(rgdal)
library(dplyr)
library(XML)
library(RCurl)
library(readxl)
library(httr)
install.packages("rdgal")
#Required inputs: State, Flow frame from ECHO run, flow frame from 2017 (shows change in outfalls),
#and VA Hydro facility list (http://deq1.bse.vt.edu/d.bet/vahydro_facilities)
#VA Hydro facility list and VPDES info spreadsheet are manual downloads due to slow internet connections, making it difficult to access without R timing out
#input/output path will also be required as the script needs a place to store downloads from VPDES
state<-"VA"
path<-"G:/My Drive/USGS_ConsumptiveUse/Spring Semester, 2018/Connor/USGS Testing"
#Get ECHO Facility List and store in dataframe 'a'
uri_query<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_facilities?output=XML&p_st=",state,"&p_tribedist=0")
ECHO_xml<-getURL(uri_query)
ECHO_query<-xmlParse(ECHO_xml)
QID<-xmlToList(ECHO_query)
QID<-QID$QueryID
uri_summary<-paste0("https://ofmpub.epa.gov/echo/cwa_rest_services.get_download?output=CSV&qid=",QID)
a<-read.csv(uri_summary,stringsAsFactors = F)
#Download list of active VPDES outfalls and separate individual permits
temp<-tempfile()
download.file("http://www.deq.virginia.gov/mapper_ext/GIS_Datasets/VPDES_Geodatabase.zip",temp)
unzip(temp,exdir=path)
VPDES<-as.data.frame(readOGR(paste0(path,"/VPDES_Geodatabase.gdb"),layer="VPDES_OUTFALLS"))
